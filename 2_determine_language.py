# -*- coding: utf-8 -*-
"""determine_language

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_LWx1bavBrXxJP_LcG_n_InxHpBKVyF0
"""

# Funzione per stabilire il testo per lingua
def determine_language(content):
    # Trattare come milestones forme come {δ::l}
    milestone_pattern = re.compile(r'\{[^\}]+\}')
    # Rimozione temporanea milestones per fare conteggio predominanza
    cleaned_content = milestone_pattern.sub('', content).strip()

    grc_pattern = re.compile(r'[Α-Ωα-ω]')
    ita_pattern = re.compile(r'[A-Za-z]')

    # Conteggio predominanza
    grc_count = len(grc_pattern.findall(cleaned_content))
    ita_count = len(ita_pattern.findall(cleaned_content))
    total_count = grc_count + ita_count

    if total_count == 0:
        return "empty"

    grc_percentage = (grc_count / total_count) * 100
    if grc_percentage > 20:  # Soglia del 20% per considerare greco il paragrafo
        return "grc"
    else:
        return "ita"

"""questa funzione può essere applicata su testi in cui vengono usate convenzioni di edizione in cui appaiono caratteri greci nella sezione di trascrizione interpretativa, es. {δ::l} per marcare espunzioni o altro. La funzione 'determine_language' serve a evitare che il programma riconosca e marchi come greco <grc> un intero paragrafo in alfabeto latino, ma che presenta anche solo una di queste forme.
Ho utilizzato i milestones per tracciare le forme come {δ::l}, 'isolandole' ed evitando che influissero sul conteggio. In seguito ho utilizzato un contatore di predominanza di alfabeto lat/grc (settato al 20%) per fare sì che nell'output le lingue venissero bene identificate.
"""